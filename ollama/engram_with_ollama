#!/bin/bash
# Engram with Ollama - Launcher script for Ollama integration with smart vector DB detection

# Get the directory where the script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPT_DIR"

# Default values
MODEL="llama3:8b"
PROMPT_TYPE="combined"
CLIENT_ID="ollama"
TEMPERATURE="0.7"
MAX_TOKENS="2048"
MEMORY_FUNCTIONS=true
AVAILABLE_MODELS="Claude"
USE_SMART_DETECTION=true

# ANSI color codes for terminal output
BLUE="\033[94m"
GREEN="\033[92m"
YELLOW="\033[93m"
RED="\033[91m"
BOLD="\033[1m"
RESET="\033[0m"

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --model)
      MODEL="$2"
      shift 2
      ;;
    --prompt-type)
      PROMPT_TYPE="$2"
      shift 2
      ;;
    --client-id)
      CLIENT_ID="$2"
      shift 2
      ;;
    --temperature)
      TEMPERATURE="$2"
      shift 2
      ;;
    --max-tokens)
      MAX_TOKENS="$2"
      shift 2
      ;;
    --no-memory)
      MEMORY_FUNCTIONS=false
      shift
      ;;
    --available-models)
      AVAILABLE_MODELS="$2"
      shift 2
      ;;
    --fallback)
      USE_SMART_DETECTION=false
      export ENGRAM_USE_FALLBACK=1
      shift
      ;;
    --help)
      echo "Engram with Ollama - Launcher script for Ollama integration"
      echo ""
      echo "Usage: engram_with_ollama [options]"
      echo ""
      echo "Options:"
      echo "  --model MODEL             Ollama model to use (default: llama3:8b)"
      echo "  --prompt-type TYPE        System prompt type: memory, communication, combined (default: combined)"
      echo "  --client-id ID            Client ID for Engram (default: ollama)"
      echo "  --temperature TEMP        Temperature for generation (default: 0.7)"
      echo "  --max-tokens TOKENS       Maximum tokens to generate (default: 2048)"
      echo "  --no-memory               Disable memory functions"
      echo "  --available-models MODELS Space-separated list of available models (default: Claude)"
      echo "  --fallback                Use file-based memory (no vector database)"
      echo "  --help                    Show this help message"
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      echo "Use --help to see available options"
      exit 1
      ;;
  esac
done

# Store the current working directory to maintain it
CURRENT_DIR="$(pwd)"

# Make helper scripts executable
chmod +x "$SCRIPT_DIR/utils/detect_best_vector_db.py" 2>/dev/null

# Detect best vector database if smart detection is enabled
if [ "$USE_SMART_DETECTION" = true ]; then
    echo -e "${BLUE}Detecting optimal vector database...${RESET}"
    
    if [ -f "$SCRIPT_DIR/utils/detect_best_vector_db.py" ]; then
        # Run detection script to determine the best DB
        DB_INFO=$(python "$SCRIPT_DIR/utils/detect_best_vector_db.py" --quiet)
        DB_AVAILABLE=$?
        
        if [ $DB_AVAILABLE -eq 0 ] && [ -n "$DB_INFO" ]; then
            # Extract the database name from the path
            DB_NAME=$(basename "$DB_INFO" | sed 's/engram_with_//' | sed 's/_ollama//' | sed 's/_faiss//' | sed 's/_lancedb//')
            
            if [[ "$DB_INFO" == *"lancedb"* ]]; then
                echo -e "${GREEN}Using LanceDB vector database (optimal for your hardware)${RESET}"
                export ENGRAM_USE_VECTORDB=lancedb
                export ENGRAM_USE_FALLBACK=0
            elif [[ "$DB_INFO" == *"faiss"* ]]; then
                echo -e "${GREEN}Using FAISS vector database (optimal for your hardware)${RESET}"
                export ENGRAM_USE_VECTORDB=faiss
                export ENGRAM_USE_FALLBACK=0
            else
                echo -e "${YELLOW}No optimal vector database detected, using file-based memory${RESET}"
                export ENGRAM_USE_FALLBACK=1
            fi
        else
            echo -e "${YELLOW}Vector database detection failed, using file-based memory${RESET}"
            export ENGRAM_USE_FALLBACK=1
        fi
    else
        echo -e "${YELLOW}Vector database detection script not found, using file-based memory${RESET}"
        export ENGRAM_USE_FALLBACK=1
    fi
else
    echo -e "${YELLOW}Using file-based memory system (no vector database)${RESET}"
    export ENGRAM_USE_FALLBACK=1
fi

# Check if Ollama is running
if ! curl -s http://localhost:11434/api/tags > /dev/null; then
  echo -e "${RED}Error: Ollama is not running. Please start Ollama first.${RESET}"
  exit 1
fi

# Use absolute paths for Ollama bridge script
OLLAMA_BRIDGE="$SCRIPT_DIR/ollama_bridge.py"
echo -e "${BLUE}Using Ollama bridge: $OLLAMA_BRIDGE${RESET}"

# Verify the bridge file exists
if [ ! -f "$OLLAMA_BRIDGE" ]; then
  echo -e "${RED}Error: Ollama bridge script not found at $OLLAMA_BRIDGE${RESET}"
  echo -e "${RED}Please check the installation path or reinstall Engram${RESET}"
  exit 1
fi

# Add vector database info to Python path if needed
if [ "$ENGRAM_USE_FALLBACK" = "0" ]; then
    export PYTHONPATH="$SCRIPT_DIR:$PYTHONPATH"
    
    # For LanceDB, we need to set up hardware-specific optimizations
    if [ "$ENGRAM_USE_VECTORDB" = "lancedb" ]; then
        # Check for Apple Silicon for Metal optimizations
        if [[ "$(uname -m)" == "arm64" ]] && [[ "$(uname -s)" == "Darwin" ]]; then
            echo -e "${GREEN}Running on Apple Silicon, optimizing for Metal...${RESET}"
            export LANCEDB_USE_METAL=1
        fi

        # Check for CUDA for optimizations
        CUDA_AVAILABLE=$(python -c "import torch; print(torch.cuda.is_available())" 2>/dev/null)
        if [ "$CUDA_AVAILABLE" == "True" ]; then
            echo -e "${GREEN}CUDA detected, enabling GPU acceleration...${RESET}"
            export LANCEDB_USE_CUDA=1
        fi
    fi
fi

# Build command with full absolute paths for scripts but preserving current directory
CMD="python $OLLAMA_BRIDGE $MODEL --prompt-type $PROMPT_TYPE --client-id $CLIENT_ID --temperature $TEMPERATURE --max-tokens $MAX_TOKENS"

if [ "$MEMORY_FUNCTIONS" = true ]; then
  CMD="$CMD --memory-functions"
fi

for model in $AVAILABLE_MODELS; do
  CMD="$CMD --available-models $model"
done

# Start the Ollama bridge
echo -e "${GREEN}${BOLD}Starting Ollama bridge with Engram memory...${RESET}"
echo -e "${BLUE}Model:${RESET} $MODEL"
echo -e "${BLUE}Prompt type:${RESET} $PROMPT_TYPE"
echo -e "${BLUE}Client ID:${RESET} $CLIENT_ID"
echo -e "${BLUE}Working directory:${RESET} $CURRENT_DIR"

if [ "$ENGRAM_USE_FALLBACK" = "1" ]; then
    echo -e "${YELLOW}Memory:${RESET} File-based (fallback mode)"
else
    if [ "$ENGRAM_USE_VECTORDB" = "lancedb" ]; then
        echo -e "${GREEN}Memory:${RESET} LanceDB vector database"
    else
        echo -e "${GREEN}Memory:${RESET} FAISS vector database"
    fi
fi

echo ""
echo -e "${BLUE}Type 'exit' or '/quit' to exit${RESET}"
echo ""

# Execute the command from the current directory
# This ensures the bridge sees the files in the user's current directory
exec $CMD