#!/bin/bash
# Engram MCP launcher with LanceDB vector database support
# This script integrates Engram MCP server with LanceDB for vector operations

# Get directory of this script
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPT_DIR"

# ANSI color codes for terminal output
BLUE="\033[94m"
GREEN="\033[92m"
YELLOW="\033[93m"
RED="\033[91m"
BOLD="\033[1m"
RESET="\033[0m"

# Default settings
CLIENT_ID="claude"
PORT=8001
HOST="127.0.0.1"
DATA_DIR="$HOME/.engram"

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --client-id)
      CLIENT_ID="$2"
      shift 2
      ;;
    --port)
      PORT="$2"
      shift 2
      ;;
    --host)
      HOST="$2"
      shift 2
      ;;
    --data-dir)
      DATA_DIR="$2"
      shift 2
      ;;
    --help)
      echo -e "${BLUE}${BOLD}Engram MCP with LanceDB${RESET}"
      echo "Usage: engram_with_lancedb_mcp [OPTIONS]"
      echo ""
      echo "Options:"
      echo "  --client-id <id>   Client ID for memory service (default: claude)"
      echo "  --port <port>      Port to run the server on (default: 8001)"
      echo "  --host <host>      Host to bind the server to (default: 127.0.0.1)"
      echo "  --data-dir <dir>   Directory to store memory data (default: ~/.engram)"
      echo "  --help             Show this help message"
      echo ""
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      echo "Run with --help for usage information"
      exit 1
      ;;
  esac
done

# Check if LanceDB is available
python -c "import lancedb" 2>/dev/null
if [ $? -ne 0 ]; then
    echo -e "${YELLOW}LanceDB not installed. Installing...${RESET}"
    python vector/lancedb/install.py
    if [ $? -ne 0 ]; then
        echo -e "${RED}Failed to install LanceDB. Exiting.${RESET}"
        exit 1
    fi
fi

# Create the memories directory if it doesn't exist
mkdir -p memories/lancedb

# Check for Apple Silicon for optimizations
if [[ "$(uname -m)" == "arm64" ]] && [[ "$(uname -s)" == "Darwin" ]]; then
    echo -e "${GREEN}Running on Apple Silicon, optimizing for Metal...${RESET}"
    export LANCEDB_USE_METAL=1
fi

# Check for CUDA for optimizations
CUDA_AVAILABLE=$(python -c "import torch; print(torch.cuda.is_available())" 2>/dev/null)
if [ "$CUDA_AVAILABLE" == "True" ]; then
    echo -e "${GREEN}CUDA detected, enabling GPU acceleration...${RESET}"
    export LANCEDB_USE_CUDA=1
fi

# Run Engram MCP server with LanceDB integration
echo -e "${BLUE}Starting Engram MCP server with LanceDB vector database...${RESET}"
echo -e "${BLUE}Initializing vector storage in: memories/lancedb${RESET}"

# Import path setup
export PYTHONPATH="$SCRIPT_DIR:$PYTHONPATH"

# Install LanceDB adapter
python -c "
import sys
import os
from pathlib import Path

# Add script directory to Python path
script_dir = Path('${SCRIPT_DIR}')
sys.path.insert(0, str(script_dir))

# Import LanceDB adapter
from vector.lancedb.adapter import install_lancedb_adapter

# Install adapter
success = install_lancedb_adapter()
if not success:
    print('Failed to install LanceDB adapter')
    sys.exit(1)
else:
    print('LanceDB adapter installed successfully')
"

# Make sure the MCP script is executable
chmod +x "$SCRIPT_DIR/engram_mcp"

# Launch MCP server
echo -e "${GREEN}Launching Engram MCP server on $HOST:$PORT${RESET}"
echo -e "${GREEN}Client ID: $CLIENT_ID${RESET}"
echo -e "${GREEN}Data Directory: $DATA_DIR${RESET}"

# Launch the MCP server
"$SCRIPT_DIR/engram_mcp" \
    --client-id "$CLIENT_ID" \
    --port "$PORT" \
    --host "$HOST" \
    --data-dir "$DATA_DIR"
