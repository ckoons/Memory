#!/bin/bash
# engram_with_claude.sh
# Launch Claude Code with Engram memory services and smart vector database detection
# Created: March 15, 2025
# Updated: March 23, 2025 - Added smart vector database detection

# Parse command line arguments
CLIENT_ID="claude"
MEMORY_ONLY=false
USE_SMART_DETECTION=true

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --client-id)
      CLIENT_ID="$2"
      shift 2
      ;;
    --memory-only)
      MEMORY_ONLY=true
      shift
      ;;
    --fallback)
      USE_SMART_DETECTION=false
      export ENGRAM_USE_FALLBACK=1
      shift
      ;;
    --help)
      echo "Usage: engram_with_claude [OPTIONS]"
      echo ""
      echo "Options:"
      echo "  --client-id NAME    Set a specific client ID (default: claude)"
      echo "  --memory-only       Only start the memory service, don't launch Claude"
      echo "  --fallback          Use file-based memory (no vector database)"
      echo "  --help              Show this help message"
      echo ""
      echo "Examples:"
      echo "  engram_with_claude                       # Launch with default client ID 'claude'"
      echo "  engram_with_claude --client-id claude2   # Launch with client ID 'claude2'"
      echo "  engram_with_claude --memory-only         # Only start memory service without Claude"
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      echo "Try 'engram_with_claude --help' for more information."
      exit 1
      ;;
  esac
done

# ANSI color codes for terminal output
BLUE="\033[94m"
GREEN="\033[92m"
YELLOW="\033[93m"
RED="\033[91m"
BOLD="\033[1m"
RESET="\033[0m"

# Get the directory where the script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPT_DIR"

# Find the Engram installation directory
# First try to find it using pip
ENGRAM_PKG_DIR=$(python -c "import engram; print(engram.__path__[0])" 2>/dev/null)
if [ -n "$ENGRAM_PKG_DIR" ]; then
  # Go up one level from the package directory to get the installation directory
  ENGRAM_DIR=$(dirname "$ENGRAM_PKG_DIR")
  echo -e "${GREEN}Found Engram installation via pip at: $ENGRAM_DIR${RESET}"
else
  # Use our current directory
  ENGRAM_DIR="$SCRIPT_DIR"
  echo -e "${YELLOW}Using current directory for Engram: $ENGRAM_DIR${RESET}"
fi

# Handle virtual environment in the Engram directory
VENV_DIR="$ENGRAM_DIR/venv"
if [ -d "$VENV_DIR" ] && [ -f "$VENV_DIR/bin/activate" ]; then
  echo -e "${GREEN}Found virtual environment at: $VENV_DIR${RESET}"
  source "$VENV_DIR/bin/activate"
else
  echo -e "${YELLOW}No Engram virtual environment found, using system Python${RESET}"
  # Add Engram directory to Python path for direct imports
  export PYTHONPATH="$ENGRAM_DIR:$PYTHONPATH"
fi

# Make helper scripts executable
chmod +x "$SCRIPT_DIR/utils/detect_best_vector_db.py" 2>/dev/null

# Detect best vector database if smart detection is enabled
if [ "$USE_SMART_DETECTION" = true ]; then
    echo -e "${BLUE}Detecting optimal vector database...${RESET}"
    
    if [ -f "$SCRIPT_DIR/utils/detect_best_vector_db.py" ]; then
        # Run detection script to determine the best DB
        DB_INFO=$(python "$SCRIPT_DIR/utils/detect_best_vector_db.py" --quiet)
        DB_AVAILABLE=$?
        
        if [ $DB_AVAILABLE -eq 0 ] && [ -n "$DB_INFO" ]; then
            # Extract the database name from the path
            DB_NAME=$(basename "$DB_INFO" | sed 's/engram_with_//' | sed 's/_ollama//' | sed 's/_faiss//' | sed 's/_lancedb//')
            
            if [[ "$DB_INFO" == *"lancedb"* ]]; then
                echo -e "${GREEN}Using LanceDB vector database (optimal for your hardware)${RESET}"
                export ENGRAM_USE_VECTORDB=lancedb
                export ENGRAM_USE_FALLBACK=0
            elif [[ "$DB_INFO" == *"faiss"* ]]; then
                echo -e "${GREEN}Using FAISS vector database (optimal for your hardware)${RESET}"
                export ENGRAM_USE_VECTORDB=faiss
                export ENGRAM_USE_FALLBACK=0
            else
                echo -e "${YELLOW}No optimal vector database detected, using file-based memory${RESET}"
                export ENGRAM_USE_FALLBACK=1
            fi
        else
            echo -e "${YELLOW}Vector database detection failed, using file-based memory${RESET}"
            export ENGRAM_USE_FALLBACK=1
        fi
    else
        echo -e "${YELLOW}Vector database detection script not found, using file-based memory${RESET}"
        export ENGRAM_USE_FALLBACK=1
    fi
    
    # For LanceDB, set up hardware-specific optimizations
    if [ "$ENGRAM_USE_VECTORDB" = "lancedb" ]; then
        # Check for Apple Silicon for Metal optimizations
        if [[ "$(uname -m)" == "arm64" ]] && [[ "$(uname -s)" == "Darwin" ]]; then
            echo -e "${GREEN}Running on Apple Silicon, optimizing for Metal...${RESET}"
            export LANCEDB_USE_METAL=1
        fi

        # Check for CUDA for optimizations
        CUDA_AVAILABLE=$(python -c "import torch; print(torch.cuda.is_available())" 2>/dev/null)
        if [ "$CUDA_AVAILABLE" == "True" ]; then
            echo -e "${GREEN}CUDA detected, enabling GPU acceleration...${RESET}"
            export LANCEDB_USE_CUDA=1
        fi
    fi
fi

# Engram paths
ENGRAM_CHECK="$ENGRAM_DIR/engram_check.py"
ENGRAM_STARTUP="$ENGRAM_DIR/engram_consolidated" # Use consolidated server

# Memory import for Claude - includes client ID
MEMORY_IMPORT="from engram.cli.quickmem import m, t, r, w, l, c, k, s, a, p, v, d, n, q, y, z; print(\"${GREEN}💭 Memory functions loaded (Client: ${CLIENT_ID})!${RESET}\"); status = s(); previous = l(3); print(\"\")"

# Alternative import with engram namespace support
ALT_MEMORY_IMPORT="
# Setup Python environment
import sys, os

# Set client ID for this Claude instance
os.environ['ENGRAM_CLIENT_ID'] = '${CLIENT_ID}'

# Add Engram directories to Python path to ensure modules can be found
ENGRAM_LOCATIONS = [
    '$ENGRAM_DIR',  # Use the detected directory
    '$HOME/projects/github/Engram',  # Default location
    os.path.expanduser('~/projects/github/Engram'),  # Expanded default path
]

for location in ENGRAM_LOCATIONS:
    if location and location not in sys.path:
        sys.path.insert(0, location)
        print(f\"${YELLOW}Added {location} to Python path${RESET}\")

# Import from engram namespace only
try:
    # Load memory functions from engram
    from engram.cli.quickmem import m, t, r, w, l, c, k, s, a, p, v, d, n, q, y, z
    print(\"${GREEN}💭 Memory functions loaded from engram package (Client: ${CLIENT_ID})!${RESET}\")
    
    # Try to load communication functions
    try:
        from engram.cli.comm_quickmem import sm, gm, ho, cc, lc, sc, gc, cs, wi, dl, do, di
        print(\"${GREEN}💬 Claude communication functions loaded from engram package!${RESET}\")
        # Show communication status
        print(\"\\n${BLUE}Claude-to-Claude Communication Status:${RESET}\")
        my_id = wi()
        comm_status = cs()
        
        # Initialize dialog support
        try:
            from engram.cli.claude_dialog import init_dialog
            # Initialize dialog with client ID
            init_dialog(\"${CLIENT_ID}\")
            print(\"${GREEN}🗣️ Dialog mode functionality initialized!${RESET}\")
            print(\"${YELLOW}Use 'dl(\\\"target_id\\\")' or 'dialog(\\\"target_id\\\")' to start dialog mode${RESET}\")
            print(\"${YELLOW}Use 'dl(\\\"*\\\")' or 'dialog(\\\"*\\\")' to dialog with all models${RESET}\")
            print(\"${YELLOW}Use 'do()' or 'dialog_off()' to exit dialog mode${RESET}\")
        except ImportError as e:
            print(f\"${YELLOW}⚠️ Dialog mode not available: {e}${RESET}\")
    except ImportError as e:
        print(f\"${YELLOW}⚠️ Claude communication functions not available in engram package: {e}${RESET}\")
except ImportError as e:
    print(f\"${RED}❌ Failed to import memory functions from engram package: {e}${RESET}\")
    print(\"${RED}❌ Claude will run without memory capabilities${RESET}\")
    sys.exit(1)

# Display vector database information
if os.environ.get('ENGRAM_USE_FALLBACK') == '1':
    print(f\"${YELLOW}Using file-based memory (fallback mode)${RESET}\")
else:
    vectordb = os.environ.get('ENGRAM_USE_VECTORDB', 'faiss')
    if vectordb == 'lancedb':
        print(f\"${GREEN}Using LanceDB vector database${RESET}\")
    else:
        print(f\"${GREEN}Using FAISS vector database${RESET}\")

# Check memory service status
try:
    status = s()
    previous = l(3)
    print(f\"${GREEN}✓ Memory service status checked successfully${RESET}\")
except Exception as e:
    print(f\"${RED}❌ Error checking memory status: {e}${RESET}\")
    print(\"${YELLOW}⚠️ Memory service may not be running correctly${RESET}\")

print(\"\")"

# Function to check if Engram is running
check_engram_running() {
    echo -e "${BLUE}${BOLD}Checking Engram services...${RESET}"
    
    # First check directly if the process is running using pgrep
    # This is more reliable than grep as it won't match itself
    ENGRAM_PIDS=$(pgrep -f "engram.api.consolidated_server" 2>/dev/null)
    PROCESS_RUNNING=$?
    
    # Also check if something is already using port 8000
    if command -v lsof >/dev/null 2>&1; then
        PORT_IN_USE=$(lsof -i :8000 -t 2>/dev/null)
        if [ -n "$PORT_IN_USE" ]; then
            PORT_PROCESS=$(ps -p $PORT_IN_USE -o command= 2>/dev/null)
            echo -e "${YELLOW}Port 8000 is already in use by process: $PORT_PROCESS (PID: $PORT_IN_USE)${RESET}"
            
            # If the process is Engram, report it as running
            if echo "$PORT_PROCESS" | grep -q "engram"; then
                echo -e "${GREEN}Engram process detected on port 8000${RESET}"
                PROCESS_RUNNING=0
                ENGRAM_PIDS=$PORT_IN_USE
            fi
        fi
    fi
    
    if [ $PROCESS_RUNNING -eq 0 ] && [ -n "$ENGRAM_PIDS" ]; then
        echo -e "${GREEN}Engram process detected as running with PID(s): $ENGRAM_PIDS${RESET}"
        
        # Check if HTTP endpoint is responding
        if curl -s "http://127.0.0.1:8000/health" > /dev/null 2>&1; then
            echo -e "${GREEN}Engram API is responding at http://127.0.0.1:8000${RESET}"
            return 0  # Services are running and responsive
        else
            echo -e "${YELLOW}Engram process is running but API is not responding${RESET}"
            # Continue with check script for more details
        fi
    else
        echo -e "${YELLOW}No Engram process detected${RESET}"
    fi
    
    # If process check was inconclusive, use the check script for more details
    if [ -x "$ENGRAM_CHECK" ]; then
        "$ENGRAM_CHECK"
        
        # Also check directly if memory server is running according to the check script
        if "$ENGRAM_CHECK" | grep -q "Memory Server: ✅ Running"; then
            echo -e "${GREEN}Engram services reported as running by check script${RESET}"
            return 0  # Services are running
        else
            echo -e "${RED}Engram services are not properly running according to check script${RESET}"
            return 1  # Services are not running properly
        fi
    else
        echo -e "${RED}Engram check script not found or not executable${RESET}"
        return 2
    fi
}

# Function to start Engram services
start_engram_services() {
    echo -e "${YELLOW}${BOLD}Starting Engram services...${RESET}"
    
    # Check if we should restart existing services
    ps aux | grep "engram.api.consolidated_server" | grep -v "grep" > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo -e "${YELLOW}Engram services already running. We'll connect to the existing service.${RESET}"
        return 0
    fi
    
    # Also check if port 8000 is in use
    if command -v lsof >/dev/null 2>&1; then
        PORT_IN_USE=$(lsof -i :8000 -t 2>/dev/null)
        if [ -n "$PORT_IN_USE" ]; then
            PORT_PROCESS=$(ps -p $PORT_IN_USE -o command= 2>/dev/null)
            echo -e "${RED}Port 8000 is already in use by process: $PORT_PROCESS (PID: $PORT_IN_USE)${RESET}"
            echo -e "${YELLOW}Killing process using port 8000...${RESET}"
            kill -15 $PORT_IN_USE 2>/dev/null
            sleep 2
        fi
    fi
    
    # Kill any leftover services to ensure clean restart
    echo -e "${YELLOW}Stopping any leftover services...${RESET}"
    pkill -f "engram.api.server" >/dev/null 2>&1
    pkill -f "engram.api.http_wrapper" >/dev/null 2>&1
    pkill -f "engram.api.consolidated_server" >/dev/null 2>&1
    sleep 1
    
    # Start consolidated memory service
    if [ -x "$ENGRAM_STARTUP" ]; then
        echo -e "${BLUE}Starting consolidated memory service...${RESET}"
        
        # Create temp file for output
        ERROR_LOG="/tmp/engram_error_$$.log"
        
        # Change to Engram directory and activate venv
        cd "$ENGRAM_DIR"
        source venv/bin/activate 2>/dev/null || true
        
        # Run with output capture to file
        # Pass our environment variable to the startup script
        if [ "$ENGRAM_USE_FALLBACK" = "1" ]; then
            echo -e "${BLUE}Executing:${RESET} $ENGRAM_STARTUP --client-id server --data-dir $HOME/.engram --fallback"
            # First attempt with explicit fallback mode
            "$ENGRAM_STARTUP" --client-id "server" --data-dir "$HOME/.engram" --fallback >$ERROR_LOG 2>&1 &
        else
            echo -e "${BLUE}Executing:${RESET} $ENGRAM_STARTUP --client-id server --data-dir $HOME/.engram"
            # Start with vector database if dependencies are available
            ENGRAM_USE_FALLBACK=0 "$ENGRAM_STARTUP" --client-id "server" --data-dir "$HOME/.engram" >$ERROR_LOG 2>&1 &
        fi
        STARTUP_PID=$!
        sleep 3
        
        # Check if process is still running (didn't crash)
        if kill -0 $STARTUP_PID 2>/dev/null; then
            echo -e "${GREEN}Engram service started with PID: $STARTUP_PID${RESET}"
        else
            echo -e "${RED}Engram service process started but terminated immediately${RESET}"
            echo -e "${YELLOW}Error output:${RESET}"
            if [ -f "$ERROR_LOG" ]; then
                # First, check for FAISS-related errors
                if grep -q "faiss" "$ERROR_LOG" || grep -q "vector_store" "$ERROR_LOG" || grep -q "numpy" "$ERROR_LOG"; then
                    echo -e "${RED}Vector database dependency issue detected${RESET}"
                    echo -e "${YELLOW}To fix vector database integration, run:${RESET}"
                    echo -e "${GREEN}cd $ENGRAM_DIR && python utils/vector_db_setup.py --install${RESET}"
                    echo -e "${YELLOW}For now, memory will run without vector database capabilities${RESET}"
                    echo -e "${YELLOW}Starting in fallback mode...${RESET}"
                    
                    # Try running with fallback flag
                    export PYTHONPATH="$ENGRAM_DIR:$PYTHONPATH"
                    "$ENGRAM_STARTUP" --client-id "server" --data-dir "$HOME/.engram" --fallback >$ERROR_LOG 2>&1 &
                    STARTUP_PID=$!
                    sleep 3
                    
                    # Check if fallback mode is running
                    if kill -0 $STARTUP_PID 2>/dev/null; then
                        echo -e "${GREEN}Engram service started in fallback mode with PID: $STARTUP_PID${RESET}"
                        return 0
                    else
                        echo -e "${RED}Fallback mode also failed to start${RESET}"
                        cat "$ERROR_LOG"
                        return 1
                    fi
                else
                    # Show the full error log for other errors
                    cat "$ERROR_LOG"
                fi
            else
                echo "No error log available"
            fi
            return 1
        fi
    else
        echo -e "${RED}Engram startup script not found or not executable${RESET}"
        return 1
    fi
    
    # Verify service is running
    ps aux | grep "engram.api.consolidated_server" | grep -v "grep" > /dev/null 2>&1
    PS_CHECK=$?
    if [ $PS_CHECK -eq 0 ]; then
        echo -e "${GREEN}${BOLD}Engram consolidated service verified running!${RESET}"
        
        # Try to wait for service to be fully ready
        echo -e "${BLUE}Waiting for service to be fully ready...${RESET}"
        for i in {1..5}; do
            # Try to connect to the health endpoint
            if curl -s "http://127.0.0.1:8000/health" > /dev/null 2>&1; then
                echo -e "${GREEN}Service is responding to requests!${RESET}"
                return 0
            fi
            sleep 1
        done
        
        # Even if health check fails, return success if process is running
        echo -e "${YELLOW}Service process is running but not responding to requests yet${RESET}"
        return 0
    else
        echo -e "${RED}Failed to start Engram consolidated service${RESET}"
        return 1
    fi
}

# Main script execution
echo -e "${BOLD}${BLUE}====== Claude with Engram (Client: $CLIENT_ID) ======${RESET}"

# Check for essential packages only - don't try to install everything
echo -e "${BLUE}Checking for essential packages...${RESET}"
MISSING_PACKAGES=false

for pkg in numpy uvicorn fastapi httpx; do
    if ! python -c "import $pkg" >/dev/null 2>&1; then
        echo -e "${YELLOW}Package $pkg is not installed${RESET}"
        MISSING_PACKAGES=true
    fi
done

if [ "$MISSING_PACKAGES" = true ]; then
    echo -e "${YELLOW}Some required packages are missing. You may need to install them manually:${RESET}"
    echo -e "${YELLOW}   pip install numpy uvicorn fastapi httpx${RESET}"
    read -p "Continue anyway? (y/n) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
else
    echo -e "${GREEN}All essential packages are installed.${RESET}"
fi

# Check if services are running
check_engram_running
status=$?

# Start services if needed
if [ $status -ne 0 ]; then
    echo -e "${YELLOW}Engram services need to be started${RESET}"
    start_engram_services
    
    # Re-check after starting
    ENGRAM_PIDS=$(pgrep -f "engram.api.consolidated_server" 2>/dev/null)
    if [ $? -eq 0 ] && [ -n "$ENGRAM_PIDS" ]; then
        echo -e "${GREEN}Engram services successfully started and running!${RESET}"
    else
        echo -e "${RED}Failed to start Engram services. Claude will run without memory.${RESET}"
        if [ "$MEMORY_ONLY" = false ]; then
            read -p "Press Enter to continue anyway, or Ctrl+C to abort..."
        else
            exit 1
        fi
    fi
else
    echo -e "${GREEN}Engram services are running!${RESET}"
fi

# Check if we're running in memory-only mode
if [ "$MEMORY_ONLY" = true ]; then
    echo -e "${GREEN}${BOLD}Memory services are ready. Not launching Claude (--memory-only was specified).${RESET}"
    exit 0
fi

# Display vector database information
if [ "$ENGRAM_USE_FALLBACK" = "1" ]; then
    echo -e "${YELLOW}${BOLD}Memory system:${RESET} File-based (fallback mode)"
else
    if [ "$ENGRAM_USE_VECTORDB" = "lancedb" ]; then
        echo -e "${GREEN}${BOLD}Memory system:${RESET} LanceDB vector database"
    else
        echo -e "${GREEN}${BOLD}Memory system:${RESET} FAISS vector database"
    fi
fi

# Launch Claude with maximum freedom
echo -e "${BLUE}${BOLD}Launching Claude Code (Client: $CLIENT_ID) with maximum freedom...${RESET}"
echo -e "${YELLOW}Claude will have unrestricted access to Bash and other tools${RESET}"

# Use the allowed tools parameter to give Claude full access
# -e flag executes the Python code before starting the session
echo "$ALT_MEMORY_IMPORT" | claude --allowedTools="Bash(*),Edit,View,Replace,BatchTool,GlobTool,GrepTool,LS,ReadNotebook,NotebookEditCell,WebFetchTool"
echo -e "${BLUE}${BOLD}====== Claude session ended ======${RESET}"